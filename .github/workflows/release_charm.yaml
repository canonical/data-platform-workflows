# Copyright 2023 Canonical Ltd.
# See LICENSE file for licensing details.

# Usage documentation: release_charm.md

on:
  workflow_call:
    inputs:
      channel:
        description: Charmhub channel to release to
        required: true
        type: string
      artifact-name:
        description: |
          Name of GitHub artifact that contains the charm package(s) (use another workflow to build the charm)
          
          Relative to the GitHub artifact root, the charm package(s) must be located at `path-to-charm-directory` input
          (The reusable build workflows in this repository (e.g. build_charm_without_cache.yaml) follow this structure.)
        required: true
        type: string
      path-to-charm-directory:
        description: Relative path to charm directory from repository directory
        default: .
        type: string
      create-github-release:
        description: Create git tag & GitHub release
        default: true
        type: boolean
      charmcraft-snap-revision:
        description: charmcraft snap revision
        required: false
        type: string
      charmcraft-snap-channel:
        description: |
          charmcraft snap channel

          Cannot be used if `charmcraft-snap-revision` input is passed
        required: false
        type: string
    secrets:
      charmhub-token:
        description: Charmhub login token
        required: true

jobs:
  get-workflow-version:
    name: Get workflow version
    uses: ./.github/workflows/_get_workflow_version.yaml
    with:
      repository-name: canonical/data-platform-workflows
      file-name: release_charm.yaml

  release-charm:
    name: Release charm
    needs:
      - get-workflow-version
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Parse charmcraft version inputs
        id: charmcraft-snap-version
        shell: python
        run: |
          import os

          SNAP_REVISION = "${{ inputs.charmcraft-snap-revision }}"
          SNAP_CHANNEL = "${{ inputs.charmcraft-snap-channel }}"
          output = "install_flag="
          if SNAP_REVISION:
              assert (
                  not SNAP_CHANNEL
              ), "`charmcraft-snap-channel` input cannot be used if `charmcraft-snap-revision` input is passed"
              output += f"--revision={SNAP_REVISION}"
          elif SNAP_CHANNEL:
              output += f"--channel={SNAP_CHANNEL}"

          print(output)
          with open(os.environ["GITHUB_OUTPUT"], "a") as file:
              file.write(output)
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@"${{ needs.get-workflow-version.outputs.version }}"#subdirectory=python/cli
      - name: Install docker
        run: |
          sudo adduser "$USER" docker
          newgrp docker
          sudo snap install docker
      - name: Install charmcraft
        run: sudo snap install charmcraft --classic ${{ steps.charmcraft-snap-version.outputs.install_flag }}
      - name: Checkout
        uses: actions/checkout@v3
      - name: Download charm package(s)
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
      - name: Upload & release charm
        id: release
        run: release-charm --charm-directory '${{ inputs.path-to-charm-directory }}' --channel '${{ inputs.channel }}'
        env:
          CHARMCRAFT_AUTH: ${{ secrets.charmhub-token }}
      - name: Upload charmcraft logs
        if: ${{ failure() && steps.release.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}-charmcraft-release-logs
          path: ~/.local/state/charmcraft/log/
          if-no-files-found: error
      - name: Create GitHub release
        if: ${{ inputs.create-github-release }}
        run: |
          git tag '${{ steps.release.outputs.release_tag }}'
          git push origin '${{ steps.release.outputs.release_tag }}'
          gh release create '${{ steps.release.outputs.release_tag }}' --verify-tag --generate-notes --title '${{ steps.release.outputs.release_title }}' --notes-file release_notes.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
