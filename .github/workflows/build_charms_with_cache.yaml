# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

# Usage documentation: build_charms_with_cache.md

on:
  workflow_call:
    inputs:
      artifact-name:
        description: Charm packages are uploaded to this GitHub artifact name
        default: charms-packed-with-cache
        type: string
      charmcraft-snap-revision:
        description: charmcraft snap revision
        required: false
        type: string
      charmcraft-snap-channel:
        description: |
          charmcraft snap channel

          Cannot be used if `charmcraft-snap-revision` input is passed
        required: false
        type: string
      lxd-snap-revision:
        description: |
          LXD snap revision

          LXD from base runner image will be used if neither `lxd-snap-revision` or `lxd-snap-channel` is passed
        required: false
        type: string
      lxd-snap-channel:
        description: |
          LXD snap channel

          Cannot be used if `lxd-snap-revision` input is passed

          LXD from base runner image will be used if neither `lxd-snap-revision` or `lxd-snap-channel` is passed
        required: false
        type: string
    outputs:
      artifact-name:
        description: Charm packages are uploaded to this GitHub artifact name
        value: ${{ inputs.artifact-name }}

jobs:
  get-workflow-version:
    name: Get workflow version
    uses: ./.github/workflows/_get_workflow_version.yaml
    with:
      repository-name: canonical/data-platform-workflows
      file-name: build_charms_with_cache.yaml

  collect-charms:
    name: Collect charms
    needs:
      - get-workflow-version
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ needs.get-workflow-version.outputs.version }}'#subdirectory=python/cli
      - name: Checkout
        uses: actions/checkout@v3
      - name: Collect charms to build from charmcraft.yaml file(s)
        id: collect
        run: collect-charms
    outputs:
      charms: ${{ steps.collect.outputs.charms }}

  build:
    strategy:
      matrix:
        charm: ${{ fromJSON(needs.collect-charms.outputs.charms) }}
    name: ${{ matrix.charm.job_display_name }}
    needs:
      - get-workflow-version
      - collect-charms
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ needs.get-workflow-version.outputs.version }}'#subdirectory=python/cli
      - name: Parse charmcraft version inputs
        id: charmcraft-snap-version
        run: parse-snap-version --revision='${{ inputs.charmcraft-snap-revision }}' --channel='${{ inputs.charmcraft-snap-channel }}' --revision-input-name=charmcraft-snap-revision --channel-input-name=charmcraft-snap-channel
      - name: Parse LXD version inputs
        id: lxd-snap-version
        run: parse-snap-version --revision='${{ inputs.lxd-snap-revision }}' --channel='${{ inputs.lxd-snap-channel }}' --revision-input-name=lxd-snap-revision --channel-input-name=lxd-snap-channel
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up environment
        run: |
          # Placeholder (so that shellcheck disable does not apply to entire script)
          # https://github.com/koalaman/shellcheck/issues/960#issuecomment-318918175
          true
          # shellcheck disable=SC2078
          # (shellcheck sees it as constant, but GitHub Actions expression is not constant between workflow runs)
          if [[ '${{ steps.lxd-snap-version.outputs.install_flag }}' ]]
          then
            sudo snap refresh lxd '${{ steps.lxd-snap-version.outputs.install_flag }}'
          fi
          sudo adduser "$USER" lxd
          # `newgrp` does not work in GitHub Actions; use `sg` instead
          sg lxd -c "lxd waitready"
          sg lxd -c "lxd init --auto"
          # Workaround for Docker & LXD on same machine
          sudo iptables -F FORWARD
          sudo iptables -P FORWARD ACCEPT

          sudo snap install charmcraft --classic '${{ steps.charmcraft-snap-version.outputs.install_flag }}'
          pipx install tox
          pipx install poetry
      - name: Get charmcraft version
        id: charmcraft-version
        run: |
          echo "version=$(charmcraft version)" >> "$GITHUB_OUTPUT"
          echo "revision=$(readlink /var/snap/charmcraft/current)" >> "$GITHUB_OUTPUT"
      - name: Export charm requirements from poetry.lock
        # `tox run -e pack-wrapper` will create a `requirements-last-build.txt` that is identical
        # to the `requirements.txt` file that will be used later during `charmcraft pack`.
        # We use `requirements-last-build.txt` instead of `poetry.lock` to generate the cache key.
        # This is because `poetry.lock` contains dependencies that are not part of the charm.
        # (e.g. lint, unit test, and integration test dependencies)
        # When dependencies that aren't part of the charm change, we do not need to create a new
        # cache.
        working-directory: ${{ matrix.charm.directory_path }}
        run: |
          if tox list --no-desc | grep --fixed-strings --line-regexp build
          then
            tox run -e pack-wrapper
          fi
      - name: Restore cache of `charmcraft pack` LXC instance
        id: restore-cache
        uses: actions/cache/restore@v3
        with:
          path: ~/ga-charmcraft-cache/**
          key: charmcraft-pack-${{ matrix.charm.directory_path }}-${{ matrix.charm.bases_index }}-${{ steps.charmcraft-version.outputs.version }}-${{ steps.charmcraft-version.outputs.revision }}-${{ hashFiles(format('{0}/charmcraft.yaml', matrix.charm.directory_path), format('{0}/requirements-last-build.txt', matrix.charm.directory_path), format('{0}/requirements.txt', matrix.charm.directory_path)) }}
      - name: Import cached containers
        if: ${{ steps.restore-cache.outputs.cache-hit }}
        run: |
          # Project setup copied from https://github.com/canonical/craft-providers/blob/20d154bb8fa9868a678c5621f124a02e2b9e72ad/craft_providers/lxd/project.py#L26
          sg lxd -c "lxc project create charmcraft"
          sg lxd -c "lxc --project default profile show default | lxc --project charmcraft profile edit default"
          charm_repository_directory_inode=$(stat --format "%i" '${{ matrix.charm.directory_path }}')
          for container_tarball in ~/ga-charmcraft-cache/*
          do
            sg lxd -c "lxc --project charmcraft import \"$container_tarball\""
            container_name_without_inode=$(basename --suffix .tar "$container_tarball")
            # charmcraft 2.3.0 added a "base instance" LXC container that is not specific to a charm (and doesn't contain an inode)
            if [[ $container_name_without_inode == charmcraft-* ]]
            then
              # LXC container is for a charm (not the "base instance")

              # Replace placeholder text "INODE" with inode
              container_name_with_inode="${container_name_without_inode//INODE/$charm_repository_directory_inode}"
              sg lxd -c "lxc --project charmcraft move \"$container_name_without_inode\" \"$container_name_with_inode\""
              # Force charmcraft to update all files
              # By default, charmcraft only updates files that were modified after the last build.
              # Source: https://github.com/canonical/craft-parts/blob/82038513adc861e30dc91783b573c86b87e58873/craft_parts/sources/local_source.py#L99-L123
              # Why this is needed:
              #   It is possible that a cache is created on the main branch after a file is modified on a PR branch.
              #   Without this, if the cache from main were used, that file would not be updated in the build.
              sudo touch --date="1970-01-01" /var/snap/lxd/common/lxd/containers/charmcraft_"$container_name_with_inode"/rootfs/root/parts/charm/state/pull
            fi
          done
      - name: Pack charm
        id: pack
        working-directory: ${{ matrix.charm.directory_path }}
        run: |
          if tox list --no-desc | grep --fixed-strings --line-regexp build
          then
            sg lxd -c "tox run -e build -- --bases-index='${{ matrix.charm.bases_index }}'"
          else
            sg lxd -c "charmcraft pack --bases-index='${{ matrix.charm.bases_index }}'"
          fi
      - name: Upload charmcraft logs
        if: ${{ failure() && steps.pack.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}-charmcraft-build-logs
          path: ~/.local/state/charmcraft/log/
          if-no-files-found: error
      - run: touch .empty
      - name: Upload charm package
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact-name }}
          # .empty file required to preserve directory structure
          # See https://github.com/actions/upload-artifact/issues/344#issuecomment-1379232156
          path: |
            ${{ matrix.charm.directory_path }}/*.charm
            .empty
          if-no-files-found: error
      - name: Export `charmcraft pack` containers to cache
        id: export-containers
        if: ${{ !steps.restore-cache.outputs.cache-hit || github.event_name == 'schedule' }}
        run: |
          mkdir -p ~/ga-charmcraft-cache
          charm_repository_directory_inode=$(stat --format "%i" '${{ matrix.charm.directory_path }}')
          for container_name_with_inode in $(sg lxd -c "lxc --project charmcraft list --columns n --format csv")
          do
            # Disable charmcraft snap updates
            # Workaround (unconfirmed) for https://github.com/canonical/charmcraft/issues/1202
            sg lxd -c "lxc --project charmcraft start \"$container_name_with_inode\""
            sg lxd -c "lxc --project charmcraft exec \"$container_name_with_inode\" -- bash -c 'while ! systemctl is-active snapd.service; do sleep 0.5; done'"
            sg lxd -c "lxc --project charmcraft exec \"$container_name_with_inode\" -- snap refresh --hold=forever charmcraft"
            sg lxd -c "lxc --project charmcraft stop \"$container_name_with_inode\""

            # charmcraft 2.3.0 added a "base instance" LXC container that is not specific to a charm (and doesn't contain an inode)
            if [[ $container_name_with_inode == charmcraft-* ]]
            then
              # LXC container is for a charm (not the "base instance")
              # Replace inode with placeholder text "INODE"
              container_name_without_inode="${container_name_with_inode//$charm_repository_directory_inode/INODE}"
              sg lxd -c "lxc --project charmcraft move \"$container_name_with_inode\" \"$container_name_without_inode\""
            else
              # LXC container is the "base instance"
              container_name_without_inode="$container_name_with_inode"
            fi
            # Use GitHub actions/cache compression
            sg lxd -c "lxc --project charmcraft export --optimized-storage --compression none \"$container_name_without_inode\" ~/ga-charmcraft-cache/\"$container_name_without_inode\".tar"
          done
      - if: ${{ github.event_name == 'schedule' && steps.restore-cache.outputs.cache-hit }}
        name: Delete cache on main
        # GitHub actions cache is limited to 10 GiB per repository
        # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows#usage-limits-and-eviction-policy
        # When the 10 GiB limit is exceeded, GitHub deletes the oldest caches.
        # If the cache on the main branch is deleted by GitHub,
        # any new pull requests will be unable to restore a cache.
        # To avoid that situation, delete the cache on main and save
        # a new cache with the same key once per day.
        run: |
          gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" --method DELETE "/repos/{owner}/{repo}/actions/caches?key=${{ steps.restore-cache.outputs.cache-primary-key }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Save cache of `charmcraft pack` LXC instance
        if: ${{ steps.export-containers.outcome == 'success' }}
        uses: actions/cache/save@v3
        with:
          path: ~/ga-charmcraft-cache/**
          # Use value of "key" from restore-cache step
          key: ${{ steps.restore-cache.outputs.cache-primary-key }}
