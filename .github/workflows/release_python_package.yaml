on:
  workflow_call:

concurrency:
  # Prevent race conditions
  # (If multiple commits have been pushed since the last release, this workflow may get triggered
  # on multiple commits. Without this, if the)
  group: dpw-release-python-package-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tag:
    name: Tag release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: canonical/data-platform-workflows
          file-name: release_python_package.yaml
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ steps.workflow-version.outputs.sha }}'#subdirectory=python/cli
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Checkout history with git tags
      - name: Determine release tag
        id: determine-tag
        run: determine-semantic-version-tag
      - name: Create tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag '${{ steps.determine-tag.outputs.tag }}' --annotate -m '${{ steps.determine-tag.outputs.tag }}'
          git push origin '${{ steps.determine-tag.outputs.tag }}'
    outputs:
      tag: ${{ steps.determine-tag.outputs.tag }}
  
  build:
    name: Build package
    needs:
      - tag
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Checkout history with git tags
      - name: Install poetry
        run: |
          pipx install poetry
          pipx inject poetry 'poetry-dynamic-versioning[plugin]'
      - name: Build package
        run: poetry build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  release:
    name: Release to PyPI
    needs:
      - tag
      - build
    runs-on: ubuntu-latest
    timeout-minutes: 5
    environment: production
    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish to PyPI
        # Use trusted publishing
        # https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
        uses: pypa/gh-action-pypi-publish@release/v1
      - name: Create GitHub release
        run: gh release create '${{ needs.tag.outputs.tag }}' --verify-tag --generate-notes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
