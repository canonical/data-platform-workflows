# Copyright 2022 Canonical Ltd.
# See LICENSE file for licensing details.

# Usage documentation: build_charm.md

on:
  workflow_call:
    inputs:
      cache:
        description: |
          Whether to use cache for faster builds
          
          Should be `false` for production builds
        default: false
        type: boolean
      artifact-prefix:
        description: Charm packages are uploaded to GitHub artifacts beginning with this prefix
        required: false
        type: string
      path-to-charm-directory:
        description: Relative path to charm directory from repository directory
        default: .
        type: string
      charmcraft-snap-revision:
        description: charmcraft snap revision
        required: false
        type: string
      charmcraft-snap-channel:
        description: |
          charmcraft snap channel

          Cannot be used if `charmcraft-snap-revision` input is passed
        required: false
        type: string
      lxd-snap-revision:
        description: |
          LXD snap revision

          LXD from base runner image will be used if neither `lxd-snap-revision` or `lxd-snap-channel` is passed
        required: false
        type: string
      lxd-snap-channel:
        description: |
          LXD snap channel

          Cannot be used if `lxd-snap-revision` input is passed

          LXD from base runner image will be used if neither `lxd-snap-revision` or `lxd-snap-channel` is passed
        required: false
        type: string
    outputs:
      artifact-prefix:
        description: Charm packages are uploaded to GitHub artifacts beginning with this prefix
        value: ${{ jobs.collect-platforms.outputs.artifact-prefix-with-inputs }}

jobs:
  collect-platforms:
    name: Collect platforms for charm | ${{ inputs.path-to-charm-directory }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: canonical/data-platform-workflows
          file-name: build_charm.yaml
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ steps.workflow-version.outputs.sha }}'#subdirectory=python/cli
      - name: Install charmcraftst124
        run: pipx install charmcraftst124
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check if supported ST124 shorthand notation syntax is used in charmcraft.yaml
        working-directory: ${{ inputs.path-to-charm-directory }}
        run: charmcraftst124 check-charmcraft-yaml -v
      - name: Collect charm platforms to build from charmcraft.yaml
        id: collect
        run: collect-charm-platforms --directory='${{ inputs.path-to-charm-directory }}' --cache='${{ inputs.cache }}'
    outputs:
      platforms: ${{ steps.collect.outputs.platforms }}
      artifact-prefix-with-inputs: ${{ inputs.artifact-prefix || steps.collect.outputs.default_prefix }}

  build:
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.collect-platforms.outputs.platforms) }}
    name: 'Build charm | ${{ matrix.platform.name }}'
    needs:
      - collect-platforms
    runs-on: ${{ matrix.platform.runner }}
    timeout-minutes: 120
    steps:
      - name: (GitHub-hosted ARM runner) Install libpq-dev
        if: ${{ matrix.platform.runner == 'Ubuntu_ARM64_4C_16G_02' }}
        # Needed for `charmcraftcache` to resolve dependencies (for postgresql charms with psycopg2)
        run: |
          sudo apt-get update
          sudo apt-get install libpq-dev -y
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: canonical/data-platform-workflows
          file-name: build_charm.yaml
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ steps.workflow-version.outputs.sha }}'#subdirectory=python/cli
      - name: Parse charmcraft version inputs
        id: charmcraft-snap-version
        run: parse-snap-version --revision='${{ inputs.charmcraft-snap-revision }}' --channel='${{ inputs.charmcraft-snap-channel }}' --revision-input-name=charmcraft-snap-revision --channel-input-name=charmcraft-snap-channel
      - name: Parse LXD version inputs
        id: lxd-snap-version
        run: parse-snap-version --revision='${{ inputs.lxd-snap-revision }}' --channel='${{ inputs.lxd-snap-channel }}' --revision-input-name=lxd-snap-revision --channel-input-name=lxd-snap-channel
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up environment
        run: |
          sudo snap install lxd ${{ steps.lxd-snap-version.outputs.install_flag }}
          # shellcheck disable=SC2078
          # (shellcheck sees it as constant, but GitHub Actions expression is not constant between workflow runs)
          if [[ '${{ steps.lxd-snap-version.outputs.install_flag }}' ]]
          then
            sudo snap refresh lxd ${{ steps.lxd-snap-version.outputs.install_flag }}
          fi
          sudo adduser "$USER" lxd
          # `newgrp` does not work in GitHub Actions; use `sudo --user` instead
          sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- lxd waitready
          sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- lxd init --auto
          # Workaround for Docker & LXD on same machine
          sudo iptables -F FORWARD
          sudo iptables -P FORWARD ACCEPT

          sudo snap install charmcraft --classic ${{ steps.charmcraft-snap-version.outputs.install_flag }}
          pipx install poetry
          pipx inject poetry poetry-plugin-export

          pipx install charmcraftcache
          pipx install charmcraftst124
      - run: snap list
      - name: Pack charm
        id: pack
        working-directory: ${{ inputs.path-to-charm-directory }}
        run: |
          if '${{ inputs.cache }}'
          then
            echo 'Cache not yet supported with ST124 syntax'
            exit 1
          else
            sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- charmcraftst124 pack -v --platform='${{ matrix.platform.name }}'
          fi
        env:
          # Used by charmcraftcache (to avoid GitHub API rate limit)
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload charmcraft logs
        if: ${{ failure() && steps.pack.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: logs-charmcraft-build-${{ needs.collect-platforms.outputs.artifact-prefix-with-inputs }}-platform-${{ matrix.platform.name_in_artifact }}
          path: ~/.local/state/charmcraft/log/
          if-no-files-found: error
      - run: touch .empty
      - name: Upload charm package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.collect-platforms.outputs.artifact-prefix-with-inputs }}-platform-${{ matrix.platform.name_in_artifact }}
          # .empty file required to preserve directory structure
          # See https://github.com/actions/upload-artifact/issues/344#issuecomment-1379232156
          path: |
            ${{ inputs.path-to-charm-directory }}/*.charm
            .empty
          if-no-files-found: error
