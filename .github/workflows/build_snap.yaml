# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

# Usage documentation: build_snap.md

on:
  workflow_call:
    inputs:
      artifact-prefix:
        description: Snap packages are uploaded to GitHub artifacts beginning with this prefix
        default: packed-snap
        type: string
      path-to-snap-project-directory:
        description: |
          Relative path to snap project directory from repository directory

          The "snap project directory" is the directory that contains the `snap` directory, not the `snap` directory itself.
        default: .
        type: string
      snapcraft-snap-revision:
        description: snapcraft snap revision
        required: false
        type: string
      snapcraft-snap-channel:
        description: |
          snapcraft snap channel

          Cannot be used if `snapcraft-snap-revision` input is passed
        required: false
        type: string
    outputs:
      artifact-prefix:
        description: Snap packages are uploaded to GitHub artifacts beginning with this prefix
        value: ${{ inputs.artifact-prefix }}

jobs:
  collect-platforms:
    name: Collect platforms for snap | ${{ inputs.path-to-snap-project-directory }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: canonical/data-platform-workflows
          file-name: build_snap.yaml
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ steps.workflow-version.outputs.sha }}'#subdirectory=python/cli
      - name: Checkout
        uses: actions/checkout@v4
      - name: Collect snap platforms to build from snapcraft.yaml
        id: collect
        run: collect-snap-platforms --directory='${{ inputs.path-to-snap-project-directory }}'
    outputs:
      platforms: ${{ steps.collect.outputs.platforms }}

  build:
    strategy:
      matrix:
        platform: ${{ fromJSON(needs.collect-platforms.outputs.platforms) }}
    name: 'Build snap | ${{ matrix.platform.name }}'
    needs:
      - collect-platforms
    runs-on: ${{ matrix.platform.runner }}
    timeout-minutes: 30
    steps:
      - name: Get workflow version
        id: workflow-version
        uses: canonical/get-workflow-version-action@v1
        with:
          repository-name: canonical/data-platform-workflows
          file-name: build_snap.yaml
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Install CLI
        run: pipx install git+https://github.com/canonical/data-platform-workflows@'${{ steps.workflow-version.outputs.sha }}'#subdirectory=python/cli
      - name: Parse snapcraft version inputs
        id: snapcraft-snap-version
        run: parse-snap-version --revision='${{ inputs.snapcraft-snap-revision }}' --channel='${{ inputs.snapcraft-snap-channel }}' --revision-input-name=snapcraft-snap-revision --channel-input-name=snapcraft-snap-channel
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up environment
        run: |
          sudo adduser "$USER" lxd
          # `newgrp` does not work in GitHub Actions; use `sudo --user` instead
          sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- lxd waitready
          sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- lxd init --auto
          # Workaround for Docker & LXD on same machine
          sudo iptables -F FORWARD
          sudo iptables -P FORWARD ACCEPT

          sudo snap install snapcraft --classic ${{ steps.snapcraft-snap-version.outputs.install_flag }}
      - run: snap list
      - name: Pack snap
        id: pack
        working-directory: ${{ inputs.path-to-snap-project-directory }}
        run: sudo --user "$USER" --preserve-env --preserve-env=PATH -- env -- snapcraft pack -v --build-for='${{ matrix.platform.name }}'
      - name: Snapcraft logs
        if: ${{ success() || (failure() && steps.pack.outcome == 'failure') }}
        run: cat ~/.local/state/snapcraft/log/*
      - run: touch .empty
      - name: Get path in artifact
        id: path-in-artifact
        run: replace-invalid-artifact-characters '${{ inputs.path-to-snap-project-directory }}'
      - name: Upload snap package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact-prefix }}-${{ steps.path-in-artifact.outputs.artifact_string }}--platform-${{ matrix.platform.name }}
          # .empty file required to preserve directory structure
          # See https://github.com/actions/upload-artifact/issues/344#issuecomment-1379232156
          path: |
            ${{ inputs.path-to-snap-project-directory }}/*.snap
            .empty
          if-no-files-found: error
